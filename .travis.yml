#
# The libdap build
#
# Initial Travis-CI control file. 6.5.15 jhrg
# Updated many times... finally using docker (containers). 7.14.15 jhrg
#
# Modified to push the result of a successful build up to an AWS S3
# bucket. jhrg 2.24.18

# virt: lxd             # use an lxd container
# arch: amd64           # optional, this is default, routes to a full VM
# os: linux             # optional, this is default
dist: xenial          # or bionic | xenial | trusty | precise with xenial as default

language: cpp

compiler: gcc         # Could add clang

# Build only 'master,' 'main,' or '.*-test-deploy' branches. This is used down in the
# "stages" section where we assume the build process is only run for branches that
# match those patterns. jhrg 8/22/22
branches:
  only:
  - master
  - main
  - /^(.*-test-deploy)$/

# This cache is used to speed up sonar scan runs. See https://docs.travis-ci.com/user/caching.
# Each branch gets its own cache. jhrg 2/11/22
cache:
  directories:
    - ./.cache/sonar/

addons:
  sonarcloud: true
  apt:
    packages:
    - libxml2-dev
    - uuid-dev
    - libcurl4-openssl-dev
    - libcppunit-dev 
    - gcovr

# remove support for debian packages. jhrg 2/23/21
# - build-essential
# - lintian
# - fakeroot
    
env:
  global:
  # NB: This value of $prefix must be shared between the hyrax-deps, libdap and bes builds.
  # Three env vars below simulate running 'source spath.sh' in the 'hyrax' repo main directory.
  # $HOME is /home/travis
  - prefix=$HOME/install
  - PATH=$prefix/bin:$PATH
  - TESTSUITEFLAGS=-j7

  # COVERITY_SCAN_TOKEN, created via the "travis encrypt" command using the project repo's public key
  - secure: "OYEzGP6BuDHctPj90EP0y0wjfSyaJs6tN89niLhq82jJfJVGvU2UmXGWACNFakM7xpobVfdwCIYomxgIz43CpNKt4TbuGW8PVIz2EI9Ir/Ne4A3W8pVHBkP8YvzRkiu0pWNeShcsJ4ZmzWEGy9YlPF36/HWai3ZCMEtJsTY8cCo="
  # SONAR_LOGIN, created using travis encrypt --org -r OPENDAP/libdap4 SONAR_LOGIN=<sonar login key>
  - secure: "LTrO/VZTxJ+Qo1FO106zCPILBMb09zezLeGcixd4BcXDICiVtVAtgw7LzCkBWn5Vxvhzd+Hs+uDHfqT8cKI8lewjJd79uHQ1I2CSqZdBs6ERQzndKpoRNm+t63qWQc7A+wDyj2m4odtO9zrhxDR3Poo38G7UtJmQLFrBf5QmLAw=" 

  # AWS_ACCESS_KEY_ID for the user 'travis-libdap'
  #- secure: "uWXN90b3+L74+TZzGonRmhxfOVyi4/MJ8jlGDTdKRepUpvVLM3D8jwj/A4fOaudrAGg64DSJUUnHp8FmzMPO2hz2kcgDwFJ+VkGdBgxPU81srIN3NOur6EcwQ0rjYEsL6AkOe3lAiQixrhg2aOWRFBtv6fOSApbSh0WqUlNfR/g="
  # AWS_SECRET_ACCESS_KEY
  #- secure: "M46pBw0ILYUg+BG9XE5exCmITD/gCAmAkYYu0UsnuQQUsSdJmHNiQ9e7/K6uodlk0doSlyekI0dQj5e+dzCgZSLoKckEwwufslM8C+0Q4ZWCwiyi8sBTOLpcgqfhtyu6gYrRiG3bHGyfDO0LHlpw34UKhtpP9z8YvN8r2isqRX0="

  # For the AWS user ci-user: travis encrypt --org -r OPENDAP/libdap4 AWS_ACCESS_KEY_ID=
  - secure: "QIk09Kg5l6QLKE44W2fqlJ840b82PpGBhb74p/fWjQPmnuUTlCnBN2/BqD5egeoTetDbtwo5K3tNTFlFbiLjO6vTKmj6L2EZL6ghaPkidBv+5Tmp1oj/UwbINakdUV3S4Y/jJ5Z3iahIW9+wiwGAnxGSNbgRhOnpivZEY787qRM="
  # travis encrypt --org -r OPENDAP/libdap4 AWS_SECRET_ACCESS_KEY=
  - secure: "MYuhqdkVABYLrY+a/wgjDsmFn0y3jXAMZMaY9UADG/wHayv7tO26gdLblLu3Y8LqzA9sq9R1aI0n1vJB//UwCMkhpSQeuNo/vYZBaRB5+uvPovdzewqJ/7Y5e806QCalTuZNtKldZE8O8ANxwy+8M7t7es6hXjImPyI+wMpdsjc="

  # GIT_UID travis-ci-opendap
  - secure: "g+SL53aSnULaToAu+HJO86Ljr6//j+aVSlVh7ROj6h80PDVmSW0xyiLUQRkA24vMrQqNY/rj6+qAXgVGORCPs2JBGcKjELzLr30eNDXfUNOjB+0actXI8sKD8I3eTZMHawOpedtk9v884Z+iQJauh04tD70sUMBp/WpCp+mXgQE="
  # GIT_PSWD travis-ci-opendap
  - secure: "Oi3LunWs6lnFSW83d8z1llVBGIfUx3E+0d6wRAnkO0Q3muTMr8zm/bmaBt7XxnUQ3uKjRp9Uwkqtt7jJDHfTMeO5mXqYz018mc+PxwPmfFk6mnCQVbu1fk2tDRFbKYBPxILk0lvkShqzfKJJ9g/5b1IBJ/oxZAErf21qMqi1IHU="
  # DOCKER_HUB_UID for our DockerHub account
  - secure: "PsI4sAD6i7dPfsYRof05Ya0GmuE9j3/gpULUNrIOGYc2wbLlApqhkUoznqeOaXGB3O+kM1Mxah6ft4PyYcuLZ0xM0H7ulT3mz+clqXuH9ssgGoDt/Ye5PJiFWNOQlRvWd7F9NNtVSBikjWN4ujalUqby2cSThBizkOXhZYe3CzM="
  # DOCKER_HUB_PSWD for our DockerHub account
  - secure: "dD0lFOU73qJztihQeK+m3mzYTUOB5uq2jI/oWRsyc9DIevI+H2RhMRC/Cc7eJP5yRUWxxVgU3Ad15ov2cnTSCyd/bddM4DmeZeoWi79G8IkjMhTL628ZAiJeysCO/vSFkw0bu4NbFADqswtCO8PUk9FICjnJr/Ts2zOvIaQOkR8="

# This file was using docker login but that didn't seem to be needed and was generating
# a warning about the plain-text credentials being stored/accessible. I dropped it, but
# in case we need to login in the future, here's what we were doing (with the caveat that
# it is not secure) jhrg 2/9/22:
# - echo $DOCKER_HUB_PSWD | docker login -u $DOCKER_HUB_UID --password-stdin

before_install:
  - pip install --user awscli

install:
  # $HOME is /home/travis and $TRAVIS_BUILD_DIR is /home/travis/build/OPENDAP/libdap4
  - aws s3 cp s3://opendap.travis.build/hyrax-dependencies-build.tar.gz $TRAVIS_BUILD_DIR
  - tar -C $HOME -xzvf $TRAVIS_BUILD_DIR/hyrax-dependencies-build.tar.gz

before_script:
  - source travis/travis_libdap_build_offset.sh
  - export LIBDAP_BUILD_NUMBER=$(expr $TRAVIS_BUILD_NUMBER - $LIBDAP_TRAVIS_BUILD_OFFSET)
  - echo "LIBDAP_BUILD_NUMBER is ${LIBDAP_BUILD_NUMBER} = ${TRAVIS_BUILD_NUMBER} - ${LIBDAP_TRAVIS_BUILD_OFFSET}"
  # moved down below to individual steps. jhrg 3/23/21 autoreconf --force --install --verbose

stages:
  - name: build
  - name: scan
    if: branch = master OR branch = main
  - name: package
  - name: hyrax-bes-trigger
    if: type != pull_request OR branch =~ ^(.*-test-deploy)$
    # Was "if: branch = master AND type != pull_request" jhrg 8/22/22

jobs:
  include:

  - stage: build
    name: "make"
    script:
    - export LIBDAP_BUILD=main
    - autoreconf --force --install --verbose
    - ./configure --disable-dependency-tracking --prefix=$prefix
    - make -j7 && make check -j7 && make install

  - stage: build
    name: "asan"
    script:
    - export LIBDAP_BUILD=asan
    - autoreconf --force --install --verbose
    - ./configure --disable-dependency-tracking --prefix=$prefix --enable-developer --enable-asan
    - make -j7 && make check -j7

  - stage: build
    name: "distcheck"
    script:
    - export LIBDAP_BUILD=distcheck
    - autoreconf --force --install --verbose
    - ./configure --disable-dependency-tracking --prefix=$prefix --enable-developer
    - make distcheck -j7

  - stage: scan
    name: "scan"
    script:
    - export LIBDAP_BUILD=sonar
    - autoreconf --force --install --verbose
    - ./configure --disable-dependency-tracking  --prefix=$prefix --enable-developer --enable-coverage
    - build-wrapper-linux-x86-64 --out-dir bw-output make -j7
    # Run these commands in bw-output?
    - make check -j7
    - ./travis/sonar-scanner-coverage.sh
    - sonar-scanner -Dsonar.login=$SONAR_LOGIN
    # Test the result of the scan and fail a PR/build if the quality gate fails
    - curl -s https://sonarcloud.io/api/project_badges/quality_gate?project=OPENDAP-libdap4 | grep "QUALITY GATE PASS"

  - stage: package
    name: "centos stream8 rpms"
    script:
      - export LIBDAP_BUILD=centos-stream8
      # $prefix = $HOME/install which is /home/travis/install here but should be /root/install in the image.
      - mkdir -p $prefix/rpmbuild
      - docker run --env prefix=/root/install --volume $prefix/rpmbuild:/root/rpmbuild 
          --volume $TRAVIS_BUILD_DIR:/root/travis --env AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID 
          --env AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY --env os=centos-stream8 
          --env LIBDAP_BUILD_NUMBER=$LIBDAP_BUILD_NUMBER opendap/centos-stream8_hyrax_builder:1.1 
          /root/travis/travis/build-rpm.sh

  - stage: package
    name: "source distribution"
    script:
      - export LIBDAP_BUILD=srcdist
      - mkdir -p $TRAVIS_BUILD_DIR/package
      - autoreconf --force --install --verbose
      - ./configure --disable-dependency-tracking --prefix=$prefix --with-build=$LIBDAP_BUILD_NUMBER
      - make dist -j7
      # Make both a libdap-<version>-<build num> and libdap-snapshot tar.gz. This will simplify
      # other operations that use the libdap source code like the bes build. Note that the VERSION
      # file holds a string that is the version number as set by the configure script and the build
      # number passed into configure when it is run. jhrg 3/23/21
      - SOURCE_VERSION=$(cat libdap_VERSION)
      - mv libdap-*.tar.gz libdap-$SOURCE_VERSION.tar.gz
      - cp libdap-$SOURCE_VERSION.tar.gz libdap-snapshot.tar.gz;

  - stage: hyrax-bes-trigger
    name: "Hyrax BES Trigger"
    script:
      - export STAGE=hyrax-bes
      - echo $STAGE
      - autoreconf --force --install --verbose
      - ./configure --disable-dependency-tracking --prefix=$prefix --with-build=$LIBDAP_BUILD_NUMBER
      - ./travis/trigger-bes-build.sh

before_deploy:
  # This part of the before_deploy action copies the built distributions named with version numbers
  # into $TRAVIS_BUILD_DIR/package and then places a second copy of those files with the version
  # number replaced with the word 'snapshot.' These files are used for the our snapshot delivery
  # and deployment process. jhrg 10/28/19
  # Also, when $LIBDAP_BUILD is 'main' a 'binary build' is captured in a tar ball and used for the
  # downstream BES build to save having to compile libdap there. jhrg 3/22/21
  - echo "LIBDAP_BUILD ${LIBDAP_BUILD}"
  - export DEPLOY="S3"
  - mkdir -p $TRAVIS_BUILD_DIR/package
  # Build the binary used by downstream Travis BES builds
  - if test "$LIBDAP_BUILD" = "main"; then tar -C $HOME -czvf $TRAVIS_BUILD_DIR/package/libdap-build.tar.gz
                                               --exclude 'install/deps*' --exclude 'install/rpmbuild*' install; fi
  # CentOS-Stream8 distribution prep
  - if test "$LIBDAP_BUILD" = "centos-stream8"; then ./travis/rpm-to-package-dir.sh "el8"; fi
  # Src dist distribution prep
  - if test "$BES_BUILD" = "srcdist"; then cp libdap-*.tar.gz $TRAVIS_BUILD_DIR/package; fi
  # Check for the stuff...
  - ls -lR $TRAVIS_BUILD_DIR/package

deploy:
  provider: s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: opendap.travis.build
  skip_cleanup: true
  local_dir: $TRAVIS_BUILD_DIR/package
  on:
    all_branches: true
    # Was "branch: master". Now supports the *-test-deploy feature and also
    # using 'main' as the branch name. jhrg 8/22/22
    condition: $LIBDAP_BUILD =~ ^main|srddist|centos-stream8$
    # Removed 'centos6|' jhrg 10/23/20
    # Removed 'centos7|' jhrg 01/27/23
